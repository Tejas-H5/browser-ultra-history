/** One liners that aren't associated with any component in particular. 
    Try to name them as close to their css counterparts */

.row {
    display: flex;
    flex-direction: row;
}

.col {
    display: flex;
    flex-direction: column;
}

.flex {
    display: flex;
}

.flex-1 {
    flex: 1;

    /** This right here is the secret sauce. Now the flex containers wont keep overflowing lmao */
    min-width: 0;
    min-height: 0;
}

.text-align-center {
    text-align: center;
}

.text-align-right {
    text-align: right;
}

.text-align-left {
    text-align: left;
}

.fixed {
    position: fixed;
}

.sticky {
    position: sticky;
}

.absolute {
    position: absolute;
}

.relative {
    position: relative;
}

.inline-block {
    display: inline-block;
}

.inline {
    display: inline;
}

.align-items-center {
    align-items: center;
}

.justify-content-center {
    justify-content: center;
}

.align-items-end {
    align-items: flex-end;
}

.align-items-start {
    align-items: flex-start;
}

.debug {
    border: 1px solid red;
}

.catastrophic---error > * {
    display: none;
}

.catastrophic---error::before {
    content: "An error occured when updating this content. You've found a bug!";
}

.absolute-fill {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
}

.hover-parent .hover-target {
    display: none !important;
}

.hover-parent .hover-target-inverse {
    display: inherit !important;
}

.hover-parent:hover .hover-target {
    display: inherit !important;
}

.hover-parent:hover .hover-target-inverse {
    display: none !important;
}

.pre-wrap {
    white-space: pre-wrap;
}

.pre {
    white-space: pre;
}

.gap-5 {
    gap: 5px;
}

.w-100 {
    width: 100%;
}

.h-100 {
    height: 100%;
}

.solid-border {
    outline: 2px solid var(--fg-color);
    border-radius: 6px;
}

.sb1l {
    border-left: 1px solid var(--fg-color);
}
.sb1r {
    border-right: 1px solid var(--fg-color);
}
.sb1t {
    border-top: 1px solid var(--fg-color);
}
.sb1b {
    border-bottom: 1px solid var(--fg-color);
}

.solid-border-sm {
    border: 1px solid var(--fg-color);
}

.solid-border-sm-rounded {
    border: 1px solid var(--fg-color);
    border-radius: 3px;
}

.z-index-100 {
    z-index: 100;
}

.z-index-200 {
    z-index: 200;
}

.z-index-300 {
    z-index: 300;
}

.z-index-100 {
    z-index: 100;
}

.z-index-200 {
    z-index: 200;
}

.z-index-300 {
    z-index: 300;
}

.v-align-bottom {
    vertical-align: bottom;
}

.table {
    display: table;
}

.table > * {
    display: table-row;
}

.table > * > * {
    display: table-cell;
}

.table-cell-min {
    width: 1%;
    white-space: nowrap;
}

.danger {
    background-color: red;
    color: white;
}

.modal-shadow {
    /* box-shadow: 0px 0px 2px 2000px rgba(0, 0, 0, 0.5); */
    background-color: rgba(0, 0, 0, 0.5);
    pointer-events: all;
}


.hover-link {
    cursor: pointer;
}
.hover-link:hover::after {
    content: " -->";
}

.handle-long-words {
    overflow-wrap: anywhere; 
    word-break: normal;
}

.overflow-y-auto {
    overflow-y: auto;
}


.inverted {
    color: var(--bg-color);
    background-color: var(--fg-color);
}

.unfocused-text-color {
    color: var(--unfocus-text-color);
}

.bg-color-focus {
    background-color: var(--bg-color-focus);
}

